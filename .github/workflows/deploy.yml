name: Deploy to Remote Server

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker build -t ${{ github.event.repository.name }}:latest .

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.REMOTE_SSH_KEY }}

      - name: Transfer Docker image to remote server
        run: |
          docker save ${{ github.event.repository.name }}:latest | bzip2 | ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'bunzip2 | docker load'

      - name: Deploy on remote server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << 'EOF'
            # Проверка Docker
            echo "Проверка статуса Docker:"
            systemctl status docker | head -n 3
            
            # Проверка доступного места
            echo "Доступное место на диске:"
            df -h | grep -E '/$|/var'
            
            # Создаем volume если его еще нет
            docker volume create ${{ github.event.repository.name }}_data || true
          
            # Создаем сеть, если она не существует
            docker network inspect app >/dev/null 2>&1 || docker network create app
          
            # Если есть старый контейнер, останавливаем и удаляем его
            docker stop ${{ github.event.repository.name }} || true
            docker rm ${{ github.event.repository.name }} || true
          
            # Создаем директорию для конфигурации, если она не существует
            mkdir -p /home/${{ secrets.REMOTE_USER }}/docker-configs/${{ github.event.repository.name }}
          
            # Создаем .env файл на сервере с секретами из GitHub Actions
            cat > /home/${{ secrets.REMOTE_USER }}/docker-configs/${{ github.event.repository.name }}/.env << EOL
            ENV=production
            EOL
          
            # Проверяем образ
            echo "Проверка наличия образа:"
            docker images | grep ${{ github.event.repository.name }}
            
            # Запускаем новый контейнер с подключенным volume и сетью
            echo "Запускаем контейнер..."
            CONTAINER_ID=$(docker run -d \
              --name ${{ github.event.repository.name }} \
              -p 127.0.0.1:8000:8000 \
              -v ${{ github.event.repository.name }}_data:/app/data \
              --network app \
              --env-file /home/${{ secrets.REMOTE_USER }}/docker-configs/${{ github.event.repository.name }}/.env \
              --restart unless-stopped \
              ${{ github.event.repository.name }}:latest)
            
            # Проверяем, запустился ли контейнер
            echo "ID контейнера: $CONTAINER_ID"
            
            # Ждем 5 секунд для запуска контейнера
            sleep 5
            
            # Проверяем статус контейнера
            echo "Статус контейнера:"
            docker ps -a | grep ${{ github.event.repository.name }}
            
            # Проверяем логи контейнера
            echo "Логи контейнера (последние 30 строк):"
            docker logs --tail 30 ${{ github.event.repository.name }}
            
            # Проверяем, есть ли ошибки в логах
            echo "Проверка ошибок в логах:"
            docker logs ${{ github.event.repository.name }} 2>&1 | grep -i "error\|exception\|fail" | tail -n 10
            
            # Проверяем сетевые подключения контейнера
            echo "Сетевые подключения контейнера:"
            docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${{ github.event.repository.name }}
          EOF