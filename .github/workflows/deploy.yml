name: Deploy to Remote Server

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  security-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run Safety Check
        id: safety
        run: |
          pip install safety
          safety check --json > safety-results.json || true
          echo "SAFETY_OUTPUT<<EOF" >> $GITHUB_ENV
          cat safety-results.json >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'My Project'
          path: '.'
          format: 'JSON'
          args: >
            --failOnCVSS 7
            --enableRetired
            --out dependency-check-report.json

      - name: Create Security Report Comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
            let safetyResults = [];
            try {
              safetyResults = JSON.parse(fs.readFileSync('safety-results.json', 'utf8'));
            } catch (e) {
              console.log('No Safety results found');
            }
            
            let dependencyCheckResults = [];
            try {
              const dcReport = JSON.parse(fs.readFileSync('dependency-check-report.json', 'utf8'));
              dependencyCheckResults = dcReport.dependencies || [];
            } catch (e) {
              console.log('No Dependency Check results found');
            }
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            let comment = '## üõ°Ô∏è Security Scan Results\n\n';
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Safety
            if (safetyResults.length > 0) {
              comment += '### Safety Scan Results\n';
              safetyResults.forEach(vuln => {
                comment += `- üö® **${vuln.package}**: ${vuln.vulnerability}\n`;
                comment += `  - Affected versions: ${vuln.affected}\n`;
                comment += `  - More info: ${vuln.more_info}\n\n`;
              });
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Dependency Check
            const vulnerableDeps = dependencyCheckResults.filter(dep => dep.vulnerabilities);
            if (vulnerableDeps.length > 0) {
              comment += '### Dependency Check Results\n';
              vulnerableDeps.forEach(dep => {
                comment += `- üì¶ **${dep.fileName}**\n`;
                dep.vulnerabilities.forEach(vuln => {
                  comment += `  - üö® ${vuln.name}: ${vuln.description}\n`;
                  comment += `    - Severity: ${vuln.severity}\n`;
                  if (vuln.references) {
                    comment += `    - Reference: ${vuln.references[0].url}\n`;
                  }
                });
                comment += '\n';
              });
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Security Scan Results')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

  build-and-deploy:
    runs-on: ubuntu-latest
    environment: prod
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker build -t ${{ github.event.repository.name }}:latest .

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.REMOTE_SSH_KEY }}

      - name: Transfer Docker image to remote server
        run: |
          docker save ${{ github.event.repository.name }}:latest | bzip2 | ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'bunzip2 | docker load'

      - name: Deploy on remote server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << 'EOF'
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
            echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Docker:"
            systemctl status docker | head -n 3
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –º–µ—Å—Ç–∞
            echo "–î–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ:"
            df -h | grep -E '/$|/var'
            
            # –°–æ–∑–¥–∞–µ–º volume –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            docker volume create ${{ github.event.repository.name }}_data || true
          
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            docker network inspect app >/dev/null 2>&1 || docker network create app
          
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ
            docker stop ${{ github.event.repository.name }} || true
            docker rm ${{ github.event.repository.name }} || true
          
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            mkdir -p /home/${{ secrets.REMOTE_USER }}/docker-configs/${{ github.event.repository.name }}
          
            # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å —Å–µ–∫—Ä–µ—Ç–∞–º–∏ –∏–∑ GitHub Actions
          cat > /home/${{ secrets.REMOTE_USER }}/docker-configs/${{ github.event.repository.name }}/.env << EOL
          ENV=production
          EOL

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–∑
            echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—Ä–∞–∑–∞:"
            docker images | grep ${{ github.event.repository.name }}
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º volume –∏ —Å–µ—Ç—å—é
            echo "–ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
            CONTAINER_ID=$(docker run -d \
              --name ${{ github.event.repository.name }} \
              -p 127.0.0.1:8000:8000 \
              -v ${{ github.event.repository.name }}_data:/app/data \
              --network app \
              --env-file /home/${{ secrets.REMOTE_USER }}/docker-configs/${{ github.event.repository.name }}/.env \
              --restart unless-stopped \
              ${{ github.event.repository.name }}:latest)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            echo "ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: $CONTAINER_ID"
            
            # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            sleep 5
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            echo "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:"
            docker ps -a | grep ${{ github.event.repository.name }}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            echo "–õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å—Ç—Ä–æ–∫):"
            docker logs --tail 30 ${{ github.event.repository.name }}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö
            echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö:"
            docker logs ${{ github.event.repository.name }} 2>&1 | grep -i "error\|exception\|fail" | tail -n 10 || echo "–û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
          EOF