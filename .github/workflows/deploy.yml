name: Deploy to Remote Server

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  security-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run Safety Check
        id: safety
        run: |
          pip install safety
          safety check --json > safety-results.json || true
          echo "SAFETY_OUTPUT<<EOF" >> $GITHUB_ENV
          cat safety-results.json >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'My Project'
          path: '.'
          format: 'JSON'
          args: >
            --failOnCVSS 7
            --enableRetired
            --out dependency-check-report.json

      - name: Create Security Report Comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Читаем результаты сканирований
            let safetyResults = [];
            try {
              safetyResults = JSON.parse(fs.readFileSync('safety-results.json', 'utf8'));
            } catch (e) {
              console.log('No Safety results found');
            }
            
            let dependencyCheckResults = [];
            try {
              const dcReport = JSON.parse(fs.readFileSync('dependency-check-report.json', 'utf8'));
              dependencyCheckResults = dcReport.dependencies || [];
            } catch (e) {
              console.log('No Dependency Check results found');
            }
            
            // Формируем комментарий
            let comment = '## 🛡️ Security Scan Results\n\n';
            
            // Добавляем результаты Safety
            if (safetyResults.length > 0) {
              comment += '### Safety Scan Results\n';
              safetyResults.forEach(vuln => {
                comment += `- 🚨 **${vuln.package}**: ${vuln.vulnerability}\n`;
                comment += `  - Affected versions: ${vuln.affected}\n`;
                comment += `  - More info: ${vuln.more_info}\n\n`;
              });
            }
            
            // Добавляем результаты Dependency Check
            const vulnerableDeps = dependencyCheckResults.filter(dep => dep.vulnerabilities);
            if (vulnerableDeps.length > 0) {
              comment += '### Dependency Check Results\n';
              vulnerableDeps.forEach(dep => {
                comment += `- 📦 **${dep.fileName}**\n`;
                dep.vulnerabilities.forEach(vuln => {
                  comment += `  - 🚨 ${vuln.name}: ${vuln.description}\n`;
                  comment += `    - Severity: ${vuln.severity}\n`;
                  if (vuln.references) {
                    comment += `    - Reference: ${vuln.references[0].url}\n`;
                  }
                });
                comment += '\n';
              });
            }
            
            // Добавляем комментарий к PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Security Scan Results')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

  build-and-deploy:
    runs-on: ubuntu-latest
    environment: prod
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: docker build -t ${{ github.event.repository.name }}:latest .

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.REMOTE_SSH_KEY }}

    - name: Transfer Docker image to remote server
      run: |
        docker save ${{ github.event.repository.name }}:latest | bzip2 | ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'bunzip2 | docker load'

    - name: Deploy on remote server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << 'EOF'
          # Создаем volume если его еще нет
          docker volume create ${{ github.event.repository.name }}_data || true
          
          # Если есть старый контейнер, останавливаем и удаляем его
          docker stop ${{ github.event.repository.name }}-container || true
          docker rm ${{ github.event.repository.name }}-container || true
          
          # Запускаем новый контейнер с подключенным volume и сетью
          docker run -d \
            --name ${{ github.event.repository.name }}-container \
            -p 8000:8000 \
            -v ${{ github.event.repository.name }}_data:/app/data \
            --network app \
            ${{ github.event.repository.name }}:latest
        EOF